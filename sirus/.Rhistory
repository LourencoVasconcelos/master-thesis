table(split)
train <- data2[split == 0, ]
test <- data2[split == 1, ]
train_y <- train[,"Waiting_Time"]
test_y <- test[,"Waiting_Time"]
train_x <- train[,-(3:5)]
train_x <- train_x[,-1]
test_x <- test[,-(3:5)]
test_x <- test_x[,-1]
#a <- sirus.cv(train_x, train_y) #Nao preciso disto qd for escolher o p0
#print(a$p0.stab)             ### RECOMENDED FOR REGRESSION CHECK MANUAL OF CV
sirus_funct <- function(New_p0){
#print(New_p0)
# p0=a$p0.stab
#FIT WITH THAT VALUE
model <- sirus.fit(train_x, train_y, p0=New_p0, num.rule.max=100)
#plot.error <- sirus.plot.cv(a)$error
#plot(plot.error)
predicted_y_train <- sirus.predict(model, train_x)
error_train <- mae(actual = train_y, predicted = predicted_y_train)
length_train <- length(model$rules)
predicted_y_test <- sirus.predict(model, test_x)
error_test <- mae(actual = test_y, predicted = predicted_y_test)
#print(error)
length_test <- length(model$rules)
output <- list(error_test, length_test, error_train, length_train)
return (output)
}
mae_values_test <- rep()
length_values_test <-rep()
mae_values_train <- rep()
length_values_train <-rep()
output2 <- sirus_funct(a$p0.stab)
u <- unlist(output2)
print(un[1])  # MAE value test
print(un[2]) # Number of rules
print(un[3]) # MAE value train
for (val in c(0.01,0.02,0.03,0.04,0.05,0.06,0.07,0.08,0.09,0.1)) {
output <- sirus_funct(val)
un <- unlist(output)
mae_values_test <- append(mae_values_test, un[1])
length_values_test <- append(length_values_test, un[2])
mae_values_train <- append(mae_values_train, un[3])
length_values_train <- append(length_values_train, un[4])
}
print(mae_values_train)
print(length_values_train)
print(mae_values_test)
print(length_values_test)
plot(mae_values_train, length_values_train,type="b",pch=22,xlim=c(min(mae_values_train),max(mae_values_test)), ylim=c(min(length_values_train),max(length_values_train)),col="red",lty=2,xlab="Mean Absolute Error",lwd=2,ylab="Number of relevant rules")
lines(mae_values_test,length_values_test,type="b",col="red",lty=1,lwd=2)
title(main="Accuracy by number of Rules", col.main="black", font.main=2)
grid()
legend("topright",legend = c("Validation", "Train"),lty=c(1,2,3),col=c("red","red"),bg="white",lwd=2)
require(sirus)
library(Metrics)
path <- "C:/Users/loure/Desktop/Tese/sns dataset2/sns3.csv"
sns <- read.csv(path)
factors <- factor(sns$Service)
encoded <- as.numeric(factors)
sns$Service <- encoded
factors2 <- factor(sns$Season)
encoded2 <- as.numeric(factors2)
sns$Season <- encoded2
data2 <- sns                                          # Duplicate data frame
print(data2)
split <- sample(c(rep(0, 0.8 * nrow(data2)), rep(1, 0.2 * nrow(data2))))
table(split)
train <- data2[split == 0, ]
test <- data2[split == 1, ]
train_y <- train[,"Waiting_Time"]
test_y <- test[,"Waiting_Time"]
train_x <- train[,-(3:5)]
train_x <- train_x[,-1]
test_x <- test[,-(3:5)]
test_x <- test_x[,-1]
#a <- sirus.cv(train_x, train_y) #Nao preciso disto qd for escolher o p0
#print(a$p0.stab)             ### RECOMENDED FOR REGRESSION CHECK MANUAL OF CV
sirus_funct <- function(New_p0){
#print(New_p0)
# p0=a$p0.stab
#FIT WITH THAT VALUE
model <- sirus.fit(train_x, train_y, p0=New_p0, num.rule.max=100)
#plot.error <- sirus.plot.cv(a)$error
#plot(plot.error)
predicted_y_train <- sirus.predict(model, train_x)
error_train <- mae(actual = train_y, predicted = predicted_y_train)
length_train <- length(model$rules)
predicted_y_test <- sirus.predict(model, test_x)
error_test <- mae(actual = test_y, predicted = predicted_y_test)
#print(error)
length_test <- length(model$rules)
output <- list(error_test, length_test, error_train, length_train)
return (output)
}
mae_values_test <- rep()
length_values_test <-rep()
mae_values_train <- rep()
length_values_train <-rep()
output2 <- sirus_funct(a$p0.stab)
u <- unlist(output2)
print(un[1])  # MAE value test
print(un[2]) # Number of rules
print(un[3]) # MAE value train
for (val in c(0.01,0.02,0.03,0.04,0.05,0.06,0.07,0.08,0.09,0.1)) {
output <- sirus_funct(val)
un <- unlist(output)
mae_values_test <- append(mae_values_test, un[1])
length_values_test <- append(length_values_test, un[2])
mae_values_train <- append(mae_values_train, un[3])
length_values_train <- append(length_values_train, un[4])
}
print(mae_values_train)
print(length_values_train)
print(mae_values_test)
print(length_values_test)
plot(mae_values_train, length_values_train,type="b",pch=22,xlim=c(min(mae_values_train),max(mae_values_test)), ylim=c(min(length_values_train),max(length_values_train)),col="red",lty=2,xlab="Mean Absolute Error",lwd=2,ylab="Number of relevant rules")
lines(mae_values_test,length_values_test,type="b",col="red",lty=1,lwd=2)
title(main="Accuracy by number of Rules", col.main="black", font.main=2)
grid()
legend("topright",legend = c("Validation", "Train"),lty=c(1,2,3),col=c("red","red"),bg="white",lwd=2)
require(sirus)
library(Metrics)
path <- "C:/Users/loure/Desktop/Tese/sns dataset2/sns3.csv"
sns <- read.csv(path)
factors <- factor(sns$Service)
encoded <- as.numeric(factors)
sns$Service <- encoded
factors2 <- factor(sns$Season)
encoded2 <- as.numeric(factors2)
sns$Season <- encoded2
data2 <- sns                                          # Duplicate data frame
print(data2)
split <- sample(c(rep(0, 0.8 * nrow(data2)), rep(1, 0.2 * nrow(data2))))
table(split)
train <- data2[split == 0, ]
test <- data2[split == 1, ]
train_y <- train[,"Waiting_Time"]
test_y <- test[,"Waiting_Time"]
train_x <- train[,-(3:5)]
train_x <- train_x[,-1]
test_x <- test[,-(3:5)]
test_x <- test_x[,-1]
#a <- sirus.cv(train_x, train_y) #Nao preciso disto qd for escolher o p0
#print(a$p0.stab)             ### RECOMENDED FOR REGRESSION CHECK MANUAL OF CV
sirus_funct <- function(New_p0){
#print(New_p0)
# p0=a$p0.stab
#FIT WITH THAT VALUE
model <- sirus.fit(train_x, train_y, p0=New_p0, num.rule.max=100)
#plot.error <- sirus.plot.cv(a)$error
#plot(plot.error)
predicted_y_train <- sirus.predict(model, train_x)
error_train <- mae(actual = train_y, predicted = predicted_y_train)
length_train <- length(model$rules)
predicted_y_test <- sirus.predict(model, test_x)
error_test <- mae(actual = test_y, predicted = predicted_y_test)
#print(error)
length_test <- length(model$rules)
output <- list(error_test, length_test, error_train, length_train)
return (output)
}
mae_values_test <- rep()
length_values_test <-rep()
mae_values_train <- rep()
length_values_train <-rep()
output2 <- sirus_funct(a$p0.stab)
u <- unlist(output2)
print(un[1])  # MAE value test
print(un[2]) # Number of rules
print(un[3]) # MAE value train
for (val in c(0.01,0.02,0.03,0.04,0.05,0.06,0.07,0.08,0.09,0.1)) {
output <- sirus_funct(val)
un <- unlist(output)
mae_values_test <- append(mae_values_test, un[1])
length_values_test <- append(length_values_test, un[2])
mae_values_train <- append(mae_values_train, un[3])
length_values_train <- append(length_values_train, un[4])
}
print(mae_values_train)
print(length_values_train)
print(mae_values_test)
print(length_values_test)
plot(mae_values_train, length_values_train,type="b",pch=22,xlim=c(min(mae_values_train),max(mae_values_test)), ylim=c(min(length_values_train),max(length_values_train)),col="red",lty=2,xlab="Mean Absolute Error",lwd=2,ylab="Number of relevant rules")
lines(mae_values_test,length_values_test,type="b",col="red",lty=1,lwd=2)
title(main="Accuracy by number of Rules", col.main="black", font.main=2)
grid()
legend("topright",legend = c("Validation", "Train"),lty=c(1,2,3),col=c("red","red"),bg="white",lwd=2)
require(sirus)
library(Metrics)
path <- "C:/Users/loure/Desktop/Tese/sns dataset/sns1_simple2.csv"
sns <- read.csv(path)
factors2 <- factor(sns$Season)
encoded2 <- as.numeric(factors2)
sns$Season <- encoded2
data2 <- sns                                          # Duplicate data frame
print(data2)
split <- sample(c(rep(0, 0.7 * nrow(data2)), rep(1, 0.3 * nrow(data2))))
table(split)
train <- data2[split == 0, ]
test <- data2[split == 1, ]
train_y <- train[,"Waiting_Time"]
test_y <- test[,"Waiting_Time"]
train_x <- train[,-(3:5)]
train_x <- train_x[,-1]
test_x <- test[,-(3:5)]
test_x <- test_x[,-1]
#a <- sirus.cv(train_x, train_y) #Nao preciso disto qd for escolher o p0
#print(a$p0.stab)             ### RECOMENDED FOR REGRESSION CHECK MANUAL OF CV
sirus_funct <- function(New_p0){
#print(New_p0)
# p0=a$p0.stab
#FIT WITH THAT VALUE
model <- sirus.fit(train_x, train_y, p0=New_p0, num.rule.max=100)
#plot.error <- sirus.plot.cv(a)$error
#plot(plot.error)
predicted_y_train <- sirus.predict(model, train_x)
error_train <- mae(actual = train_y, predicted = predicted_y_train)
length_train <- length(model$rules)
predicted_y_test <- sirus.predict(model, test_x)
error_test <- mae(actual = test_y, predicted = predicted_y_test)
#print(error)
length_test <- length(model$rules)
output <- list(error_test, length_test, error_train, length_train)
return (output)
}
mae_values_test <- rep()
length_values_test <-rep()
mae_values_train <- rep()
length_values_train <-rep()
output2 <- sirus_funct(a$p0.stab)
u <- unlist(output2)
print(un[1])  # MAE value test
print(un[2]) # Number of rules
print(un[3]) # MAE value train
for (val in c(0.01,0.02,0.03,0.04,0.05,0.06,0.07,0.08,0.09,0.1)) {
output <- sirus_funct(val)
un <- unlist(output)
mae_values_test <- append(mae_values_test, un[1])
length_values_test <- append(length_values_test, un[2])
mae_values_train <- append(mae_values_train, un[3])
length_values_train <- append(length_values_train, un[4])
}
print(mae_values_train)
print(length_values_train)
print(mae_values_test)
print(length_values_test)
mae_values_train <- c(37.77210, 37.72863, 38.06781, 38.01169, 38.70267, 38.75737, 38.79599, 39.11903, 39.48953, 39.48490)
mae_values_test <- c(39.17571, 39.27656, 38.91509,38.61979, 39.03617,39.07642, 39.16429 ,39.81167, 39.85020, 39.84110)
length_values_test <- c(53, 33, 21, 13,  7,  6 , 5 , 3 , 2 , 2)
length_values_train <- c(53, 33, 21, 13,  7,  6 , 5 , 3 , 2 , 2)
plot(mae_values_train, length_values_train,type="b",pch=22,xlim=c(min(mae_values_train),max(mae_values_test)), ylim=c(min(length_values_train),max(length_values_train)),col="red",lty=2,xlab="Mean Absolute Error",lwd=2,ylab="Number of relevant rules")
lines(mae_values_test,length_values_test,type="b",col="red",lty=1,lwd=2)
title(main="Accuracy by number of Rules", col.main="black", font.main=2)
grid()
legend(x=39-0.75,y=48+1,legend = c("Validation", "Train"),lty=c(1,2,3),col=c("red","red"),bg="white",lwd=2)
require(sirus)
library(Metrics)
path <- "C:/Users/loure/Desktop/Tese/sns dataset/sns2_simple.csv"
sns <- read.csv(path)
factors2 <- factor(sns$Season)
encoded2 <- as.numeric(factors2)
sns$Season <- encoded2
data2 <- sns                                          # Duplicate data frame
#print(data2)
split <- sample(c(rep(0, 0.7 * nrow(data2)), rep(1, 0.3 * nrow(data2))))
table(split)
train <- data2[split == 0, ]
test <- data2[split == 1, ]
train_y <- train[,"Waiting_Time"]
test_y <- test[,"Waiting_Time"]
train_x <- train[,-(3:5)]
train_x <- train_x[,-1]
test_x <- test[,-(3:5)]
test_x <- test_x[,-1]
#a <- sirus.cv(train_x, train_y) #Nao preciso disto qd for escolher o p0
#print(a$p0.stab)             ### RECOMENDED FOR REGRESSION CHECK MANUAL OF CV
sirus_funct <- function(New_p0){
#print(New_p0)
# p0=a$p0.stab
#FIT WITH THAT VALUE
model <- sirus.fit(train_x, train_y, p0=New_p0, num.rule.max=100)
#plot.error <- sirus.plot.cv(a)$error
#plot(plot.error)
predicted_y_train <- sirus.predict(model, train_x)
error_train <- mae(actual = train_y, predicted = predicted_y_train)
length_train <- length(model$rules)
predicted_y_test <- sirus.predict(model, test_x)
error_test <- mae(actual = test_y, predicted = predicted_y_test)
#print(error)
length_test <- length(model$rules)
output <- list(error_test, length_test, error_train, length_train)
return (output)
}
mae_values_test <- rep()
length_values_test <-rep()
mae_values_train <- rep()
length_values_train <-rep()
output2 <- sirus_funct(a$p0.stab)
u <- unlist(output2)
print(un[1])  # MAE value test
print(un[2]) # Number of rules
print(un[3]) # MAE value train
for (val in c(0.01,0.02,0.03,0.04,0.05,0.06,0.07,0.08,0.09,0.1)) {
output <- sirus_funct(val)
un <- unlist(output)
mae_values_test <- append(mae_values_test, un[1])
length_values_test <- append(length_values_test, un[2])
mae_values_train <- append(mae_values_train, un[3])
length_values_train <- append(length_values_train, un[4])
}
print(mae_values_train)
print(length_values_train)
print(mae_values_test)
print(length_values_test)
plot(mae_values_train, length_values_train,type="b",pch=22,xlim=c(min(mae_values_train),max(mae_values_test)), ylim=c(min(length_values_train),max(length_values_train)),col="red",lty=2,xlab="Mean Absolute Error",lwd=2,ylab="Number of relevant rules")
lines(mae_values_test,length_values_test,type="b",col="red",lty=1,lwd=2)
title(main="Accuracy by number of Rules", col.main="black", font.main=2)
grid()
legend(x=39-0.75,y=48+1,legend = c("Validation", "Train"),lty=c(1,2,3),col=c("red","red"),bg="white",lwd=2)
require(sirus)
library(Metrics)
path <- "C:/Users/loure/Desktop/Tese/sns dataset/sns2_simple.csv"
sns <- read.csv(path)
factors2 <- factor(sns$Season)
encoded2 <- as.numeric(factors2)
sns$Season <- encoded2
data2 <- sns                                          # Duplicate data frame
#print(data2)
split <- sample(c(rep(0, 0.7 * nrow(data2)), rep(1, 0.3 * nrow(data2))))
table(split)
train <- data2[split == 0, ]
test <- data2[split == 1, ]
train_y <- train[,"Waiting_Time"]
test_y <- test[,"Waiting_Time"]
train_x <- train[,-(3:5)]
train_x <- train_x[,-1]
test_x <- test[,-(3:5)]
test_x <- test_x[,-1]
#a <- sirus.cv(train_x, train_y) #Nao preciso disto qd for escolher o p0
#print(a$p0.stab)             ### RECOMENDED FOR REGRESSION CHECK MANUAL OF CV
sirus_funct <- function(New_p0){
#print(New_p0)
# p0=a$p0.stab
#FIT WITH THAT VALUE
model <- sirus.fit(train_x, train_y, p0=New_p0, num.rule.max=100)
#plot.error <- sirus.plot.cv(a)$error
#plot(plot.error)
predicted_y_train <- sirus.predict(model, train_x)
error_train <- mae(actual = train_y, predicted = predicted_y_train)
length_train <- length(model$rules)
predicted_y_test <- sirus.predict(model, test_x)
error_test <- mae(actual = test_y, predicted = predicted_y_test)
#print(error)
length_test <- length(model$rules)
output <- list(error_test, length_test, error_train, length_train)
return (output)
}
mae_values_test <- rep()
length_values_test <-rep()
mae_values_train <- rep()
length_values_train <-rep()
output2 <- sirus_funct(a$p0.stab)
u <- unlist(output2)
print(un[1])  # MAE value test
print(un[2]) # Number of rules
print(un[3]) # MAE value train
for (val in c(0.01,0.02,0.03,0.04,0.05,0.06,0.07,0.08,0.09,0.1)) {
output <- sirus_funct(val)
un <- unlist(output)
mae_values_test <- append(mae_values_test, un[1])
length_values_test <- append(length_values_test, un[2])
mae_values_train <- append(mae_values_train, un[3])
length_values_train <- append(length_values_train, un[4])
}
print(mae_values_train)
print(length_values_train)
print(mae_values_test)
print(length_values_test)
plot(mae_values_train, length_values_train,type="b",pch=22,xlim=c(min(mae_values_train),max(mae_values_test)), ylim=c(min(length_values_train),max(length_values_train)),col="red",lty=2,xlab="Mean Absolute Error",lwd=2,ylab="Number of relevant rules")
lines(mae_values_test,length_values_test,type="b",col="red",lty=1,lwd=2)
title(main="Accuracy by number of Rules", col.main="black", font.main=2)
grid()
legend("topright",legend = c("Validation", "Train"),lty=c(1,2,3),col=c("red","red"),bg="white",lwd=2)
require(sirus)
library(Metrics)
path <- "C:/Users/loure/Desktop/Tese/sns dataset/sns2_simple.csv"
sns <- read.csv(path)
factors2 <- factor(sns$Season)
encoded2 <- as.numeric(factors2)
sns$Season <- encoded2
data2 <- sns                                          # Duplicate data frame
#print(data2)
split <- sample(c(rep(0, 0.7 * nrow(data2)), rep(1, 0.3 * nrow(data2))))
table(split)
train <- data2[split == 0, ]
test <- data2[split == 1, ]
train_y <- train[,"Waiting_Time"]
test_y <- test[,"Waiting_Time"]
train_x <- train[,-(3:5)]
train_x <- train_x[,-1]
test_x <- test[,-(3:5)]
test_x <- test_x[,-1]
#a <- sirus.cv(train_x, train_y) #Nao preciso disto qd for escolher o p0
#print(a$p0.stab)             ### RECOMENDED FOR REGRESSION CHECK MANUAL OF CV
sirus_funct <- function(New_p0){
#print(New_p0)
# p0=a$p0.stab
#FIT WITH THAT VALUE
model <- sirus.fit(train_x, train_y, p0=New_p0, num.rule.max=100)
#plot.error <- sirus.plot.cv(a)$error
#plot(plot.error)
predicted_y_train <- sirus.predict(model, train_x)
error_train <- mae(actual = train_y, predicted = predicted_y_train)
length_train <- length(model$rules)
predicted_y_test <- sirus.predict(model, test_x)
error_test <- mae(actual = test_y, predicted = predicted_y_test)
#print(error)
length_test <- length(model$rules)
output <- list(error_test, length_test, error_train, length_train)
return (output)
}
mae_values_test <- rep()
length_values_test <-rep()
mae_values_train <- rep()
length_values_train <-rep()
output2 <- sirus_funct(a$p0.stab)
u <- unlist(output2)
print(un[1])  # MAE value test
print(un[2]) # Number of rules
print(un[3]) # MAE value train
for (val in c(0.01,0.02,0.03,0.04,0.05,0.06,0.07,0.08,0.09,0.1)) {
output <- sirus_funct(val)
un <- unlist(output)
mae_values_test <- append(mae_values_test, un[1])
length_values_test <- append(length_values_test, un[2])
mae_values_train <- append(mae_values_train, un[3])
length_values_train <- append(length_values_train, un[4])
}
print(mae_values_train)
print(length_values_train)
print(mae_values_test)
print(length_values_test)
plot(mae_values_train, length_values_train,type="b",pch=22,xlim=c(min(mae_values_train),max(mae_values_test)), ylim=c(min(length_values_train),max(length_values_train)),col="red",lty=2,xlab="Mean Absolute Error",lwd=2,ylab="Number of relevant rules")
lines(mae_values_test,length_values_test,type="b",col="red",lty=1,lwd=2)
title(main="Accuracy by number of Rules", col.main="black", font.main=2)
grid()
legend("topright",legend = c("Validation", "Train"),lty=c(1,2,3),col=c("red","red"),bg="white",lwd=2)
require(sirus)
library(Metrics)
path <- "C:/Users/loure/Desktop/Tese/sns dataset/sns2_simple.csv"
sns <- read.csv(path)
factors2 <- factor(sns$Season)
encoded2 <- as.numeric(factors2)
sns$Season <- encoded2
data2 <- sns                                          # Duplicate data frame
#print(data2)
split <- sample(c(rep(0, 0.7 * nrow(data2)), rep(1, 0.3 * nrow(data2))))
table(split)
train <- data2[split == 0, ]
test <- data2[split == 1, ]
train_y <- train[,"Waiting_Time"]
test_y <- test[,"Waiting_Time"]
train_x <- train[,-(3:5)]
train_x <- train_x[,-1]
test_x <- test[,-(3:5)]
test_x <- test_x[,-1]
#a <- sirus.cv(train_x, train_y) #Nao preciso disto qd for escolher o p0
#print(a$p0.stab)             ### RECOMENDED FOR REGRESSION CHECK MANUAL OF CV
sirus_funct <- function(New_p0){
#print(New_p0)
# p0=a$p0.stab
#FIT WITH THAT VALUE
model <- sirus.fit(train_x, train_y, p0=New_p0, num.rule.max=100)
#plot.error <- sirus.plot.cv(a)$error
#plot(plot.error)
predicted_y_train <- sirus.predict(model, train_x)
error_train <- mae(actual = train_y, predicted = predicted_y_train)
length_train <- length(model$rules)
predicted_y_test <- sirus.predict(model, test_x)
error_test <- mae(actual = test_y, predicted = predicted_y_test)
#print(error)
length_test <- length(model$rules)
output <- list(error_test, length_test, error_train, length_train)
return (output)
}
mae_values_test <- rep()
length_values_test <-rep()
mae_values_train <- rep()
length_values_train <-rep()
output2 <- sirus_funct(a$p0.stab)
u <- unlist(output2)
print(un[1])  # MAE value test
print(un[2]) # Number of rules
print(un[3]) # MAE value train
for (val in c(0.01,0.02,0.03,0.04,0.05,0.06,0.07,0.08,0.09,0.1)) {
output <- sirus_funct(val)
un <- unlist(output)
mae_values_test <- append(mae_values_test, un[1])
length_values_test <- append(length_values_test, un[2])
mae_values_train <- append(mae_values_train, un[3])
length_values_train <- append(length_values_train, un[4])
}
print(mae_values_train)
print(length_values_train)
print(mae_values_test)
print(length_values_test)
plot(mae_values_train, length_values_train,type="b",pch=22,xlim=c(min(mae_values_train),max(mae_values_test)), ylim=c(min(length_values_train),max(length_values_train)),col="red",lty=2,xlab="Mean Absolute Error",lwd=2,ylab="Number of relevant rules")
lines(mae_values_test,length_values_test,type="b",col="red",lty=1,lwd=2)
title(main="Accuracy by number of Rules", col.main="black", font.main=2)
grid()
legend("topright",legend = c("Validation", "Train"),lty=c(1,2,3),col=c("red","red"),bg="white",lwd=2)
